import { MessageContext } from 'vk-io';
import { NewChatMembersContext, User } from 'puregram';
import { NextMiddleware, NextMiddlewareReturn } from 'middleware-io';
import { stripIndents } from 'common-tags';

import { Context, Middleware } from '@/core';
import { vkPeerId, telegramChatId, vkGroupId } from '@/config';
import { getUserString, isVK, telegram, vk } from '@/utils';
import { UsersGetResponse } from 'vk-io/lib/api/schemas/responses';

/**
 * –ù–µ –∑–Ω–∞—é, –∫–∞–∫ –Ω–∞–∫–æ—Å—è—á–∏–ª Negezor, –Ω–æ updates.on('chat_invite_user', ...) –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.
 * –í—ã–∫—Ä—É—á–∏–≤–∞–µ–º—Å—è –∫–∞–∫ –º–æ–∂–µ–º
 */
export const inviteMiddleware = new Middleware({
  middleware: async (
    context: Context,
    next: NextMiddleware
  ): Promise<MessageContext | NextMiddlewareReturn> => {
    if (!context.senderId) return;

    if (isVK(context)) {
      if (
        context.eventType !== 'chat_invite_user' ||
        context.eventMemberId !== -vkGroupId
      )
        return next();
    } else if (
      !(context instanceof NewChatMembersContext) ||
      !context.eventMembers.some((em: User) => em.id === telegram.bot.id)
    )
      return next();

    await context.send(stripIndents`
      üòä –°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ —ç—Ç—É –±–µ—Å–µ–¥—É!
      ‚öôÔ∏è –ß—Ç–æ–±—ã —è –º–æ–≥ —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π, –≤—ã–¥–∞–π—Ç–µ –º–Ω–µ –ø—Ä–∞–≤–æ –Ω–∞ —á—Ç–µ–Ω–∏–µ –ø–µ—Ä–µ–ø–∏—Å–∫–∏ –∏–ª–∏ –Ω–∞–∑–Ω–∞—á—å—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.

      üìö –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ–±–æ –º–Ω–µ –∏ –º–æ–µ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–µ - https://vk.com/@tiktokbot-info
    `);

    if (isVK(context)) {
      const [vkUser]: UsersGetResponse = await vk.api.users.get({
        user_ids: context.senderId.toString()
      });

      return vk.api.messages.send({
        peer_id: vkPeerId,
        message: stripIndents`
          üôÉ –ú–µ–Ω—è –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ –≤ –±–µ—Å–µ–¥—É
          
          ü§î –ü—Ä–∏–≥–ª–∞—Å–∏–≤—à–∏–π —á–µ–ª–æ–≤–µ–∫: [id${context.senderId}|${vkUser.first_name} ${vkUser.last_name}]
          üî¢ ID –¥–∏–∞–ª–æ–≥–∞: ${context.peerId}
        `,
        random_id: 0
      });
    } else {
      if (!context.from) return;

      return telegram.api.sendMessage({
        chat_id: telegramChatId,
        text: stripIndents`
          üôÉ –ú–µ–Ω—è –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ –≤ –±–µ—Å–µ–¥—É
          
          ü§î –ü—Ä–∏–≥–ª–∞—Å–∏–≤—à–∏–π —á–µ–ª–æ–≤–µ–∫: ${getUserString(context.from.toJSON())}
          üî¢ ID —á–∞—Ç–∞: ${context.chatId}
        `,
        parse_mode: 'markdown'
      });
    }
  }
});
