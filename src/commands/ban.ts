import { getMongoRepository, MongoRepository } from 'typeorm';
import {
  IResolvedOwnerResource,
  IResolvedTargetResource,
  resolveResource
} from 'vk-io';

import { Command, Context } from '@/core';
import { vk } from '@/utils';
import { User } from '@/entities';

const userRepository: MongoRepository<User> = getMongoRepository(User);

export const banCommand = new Command({
  trigger: /^\/(—Ä–∞–∑|)–±–∞–Ω( .*|)$/i,
  handler: async (context: Context) => {
    // –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ - –∏–≥–Ω–æ—Ä–∏–º
    if (context.user.rights < 1) return;

    let vkId: number;

    const notFound = () =>
      context.send(
        '‚ùóÔ∏è –£–∫–∞–∑–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (${context.$match[2]}) –Ω–µ –Ω–∞–π–¥–µ–Ω'
      );

    if (context.$match[2]) {
      const resource:
        | IResolvedTargetResource
        | IResolvedOwnerResource
        | undefined = await resolveResource({
        api: vk.api,
        resource: context.$match[2]
      });
      if (!resource || resource.type !== 'user') return notFound();

      vkId = resource.id;
    } else if (context.replyMessage) {
      vkId = context.replyMessage.senderId;
    } else return notFound();

    if (context.$match[1] === '—Ä–∞–∑') {
      context.user.rights = 1;
      await userRepository.save(context.user);

      return context.send(`ü§ô –£—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–∞–Ω–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @id${vkId}`);
    } else {
      context.user.rights = -1;
      await userRepository.save(context.user);

      return context.send(`ü§¨ –£—Å–ø–µ—à–Ω–æ –∑–∞–±–∞–Ω–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @id${vkId}`);
    }
  }
});
